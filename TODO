
FXZ Utils To-Do List
===================


FXZ was made by nesting the Fast LZMA2 library within liblzma to create
a two-headed monster, libflzma. It would be better to adapt the necessary
components from fast-lzma2 and fit them neatly into the rest of the
liblzma code.

So far the only tested build environments are x86-64 Ubuntu Linux and
Windows/MSYS2. fxz is the only tool currently enabled to build.


Known bugs
----------

    The xz test suite is too incomplete. However the Fast LZMA2 code has
    a thorough fuzz tester derived from the ZStandard project. It has
    also been tested on random file collections using the Radyx archiver.

    If the memory usage limit is less than about 8 MiB, fxz is unable to
    automatically scale down the compression settings enough even though
    it would be possible by switching from radix match finder to HC3/HC4.

    fxz doesn't quote unprintable characters when it displays file names
    given on the command line.

    tuklib_exit() doesn't block signals => EINTR is possible.

    SIGTSTP is not handled. If fxz is stopped, the estimated remaining
    time and calculated (de)compression speed won't make sense in the
    progress indicator (fxz --verbose).

    If libflzma has created threads and fork() gets called, libflzma
    code will break in the child process unless it calls exec() and
    doesn't touch libflzma.


Missing features
----------------

    The Fast LZMA2 library already supports multi-threaded
    decompression, but it doesn't use info from .xz block headers.
    Instead it speculatively reads compressed data into memory and
    parses it searching for dictionary resets. This is based on the
    scheme Igor Pavlov introduced in 7-Zip 18.03. It is not enabled in
    fxz because the new api function it requires is not done, and
    because use of block headers is a better system for .xz files. To
    enable it, remove the line in lzma2_fast_encoder.c which sets
    FL2_p_resetInterval to 0, and change FL2_createDStream() in
    lzma2_fast_decoder.c to FL2_createDStreamMt(nbThreads), where
    nbThreads is 0 or some fixed number. The decoder could use more
    than 5 * dict_size of memory per thread and the limiter is NOT
    enabled.

    Add support for storing metadata in .xz files. A preliminary
    idea is to create a new Stream type for metadata. When both
    metadata and data are wanted in the same .xz file, two or more
    Streams would be concatenated.

    The state stored in lzma_stream should be cloneable, which would
    be mostly useful when using a preset dictionary in LZMA2, but
    it may have other uses too. Compare to deflateCopy() in zlib.

    Support LZMA_FINISH in raw decoder to indicate end of LZMA1 and
    other streams that don't have an end of payload marker.

    Adjust dictionary size when the input file size is known.
    Maybe do this only if an option is given.

    xz doesn't support copying extended attributes, access control
    lists etc. from source to target file.

    Buffer-to-buffer coding could use less RAM (especially when
    decompressing LZMA1 or LZMA2).

    I/O library is not implemented (similar to gzopen() in zlib).
    It will be a separate library that supports uncompressed, .gz,
    .bz2, .lzma, and .xz files.

    Support changing lzma_options_lzma.mode with lzma_filters_update().

    Support LZMA_FULL_FLUSH for lzma_stream_decoder() to stop at
    Block and Stream boundaries.

    lzma_strerror() to convert lzma_ret to human readable form?
    This is tricky, because the same error codes are used with
    slightly different meanings, and this cannot be fixed anymore.

    Make it possible to adjust LZMA2 options in the middle of a Block
    so that the encoding speed vs. compression ratio can be optimized
    when the compressed data is streamed over network.

    Improved BCJ filters. The current filters are small but they aren't
    so great when compressing binary packages that contain various file
    types. Specifically, they make things worse if there are static
    libraries or Linux kernel modules. The filtering could also be
    more effective (without getting overly complex), for example,
    streamable variant BCJ2 from 7-Zip could be implemented.

    Filter that autodetects specific data types in the input stream
    and applies appropriate filters for the corrects parts of the input.
    Perhaps combine this with the BCJ filter improvement point above.

    Long-range LZ77 method as a separate filter or as a new LZMA2
    match finder.


Documentation
-------------

    More tutorial programs are needed for libflzma.

    Document the LZMA1 and LZMA2 algorithms.


Miscellaneous
------------

    Try to get the media type for .xz registered at IANA.

